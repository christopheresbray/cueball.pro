rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAdmin() {
      return request.auth.token.role == 'admin';
    }
    
    function isCaptain(teamId) {
      let team = get(/databases/$(database)/documents/teams/$(teamId));
      return team != null && team.data.captainUserId == request.auth.uid;
    }
    
    // Helper function to get team IDs from a match document
    function getTeamIds(data) {
      return [data.homeTeamId, data.awayTeamId];
    }
    
    // Helper function to check if user is captain of either team in the match
    function isMatchTeamCaptain(matchData) {
      let teamIds = getTeamIds(matchData);
      return teamIds.size() > 0 && (isCaptain(teamIds[0]) || isCaptain(teamIds[1]));
    }
    
    // Allow read access for everyone
    match /{document=**} {
      allow read: if true;
    }

    // Allow writes to teams only by team captains
    match /teams/{teamId} {
      allow read: if true;
      allow write: if isAdmin() || 
        resource.data.captainUserId == request.auth.uid;
    }

    // Allow players to update their own player documents AND allow team captains to create new players
    match /players/{playerId} {
      allow create: if request.auth != null;  // Simplified rule since we control creation through the backend
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Allow authenticated users to manage team_players and player_statistics
    match /team_players/{document} {
      allow write: if request.auth != null;
    }

    match /player_statistics/{document} {
      allow write: if request.auth != null;
    }

    // Allow team captains to update their matches
    match /matches/{matchId} {
      allow read: if true;
      allow create: if request.auth != null && resource.data.seasonId != null;
      allow update: if request.auth != null && (
                    isLeagueAdmin(get(/databases/$(database)/documents/seasons/$(resource.data.seasonId)).data.leagueId) ||
                    isTeamCaptain(resource.data.homeTeamId, resource.data.seasonId) ||
                    isTeamCaptain(resource.data.awayTeamId, resource.data.seasonId)
                  );
                  
      // Specific validation for frame updates within a match update
      function validateFramesUpdate(framesBefore, framesAfter) {
        // Allow adding frames or updating existing ones
        // Ensure required fields exist when setting a winner
        return framesAfter.size() >= framesBefore.size() &&
               framesAfter.values().forall(f => 
                 f.keys().hasAll(['round', 'homePlayerPosition', 'awayPlayerPosition', 'homePlayerId', 'awayPlayerId', 'seasonId']) &&
                 (f.winnerPlayerId == null || f.keys().hasAll(['winnerPlayerId', 'isComplete', 'homeScore', 'awayScore'])) // Renamed
               );
      }
      
      allow update: if request.auth != null && 
                      validateFramesUpdate(resource.data.frames, request.resource.data.frames);
                      
      allow delete: if isLeagueAdmin(get(/databases/$(database)/documents/seasons/$(resource.data.seasonId)).data.leagueId);
    }

    // Allow team captains to create frames for their matches
    match /frames/{frameId} {
      allow read: if true;
      allow create: if isAdmin() || (
        request.auth != null && 
        request.resource.data.matchId != null &&
        request.resource.data.homePlayerId != null &&
        request.resource.data.awayPlayerId != null &&
        request.resource.data.winnerId != null
      );
      allow update, delete: if isAdmin() || (
        request.auth != null && 
        resource.data.matchId != null &&
        get(/databases/$(database)/documents/matches/$(resource.data.matchId)).data != null &&
        isMatchTeamCaptain(get(/databases/$(database)/documents/matches/$(resource.data.matchId)).data)
      );
    }

    // Admin users have full write access
    match /{collection}/{document=**} {
      allow write: if request.auth != null &&
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
