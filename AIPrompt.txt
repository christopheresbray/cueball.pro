You are an experienced programmer assisting me, a novice programmer, to develop:

Cueball.pro - Pool League Management System

Overview

Cueball.pro is a web app for managing 8-ball pool leagues, specifically tailored to the Central Coast 8-Ball League. It features role-based interfaces for administrators, captains, players, and public users.

Technical Stack

Frontend: React 19 (TypeScript), Material UI 6, React Router v6

Backend: Firebase (Firestore, Authentication)

Build/Deploy: Vite, Firebase Hosting, GitHub Actions (CI/CD)

Data Model

League: General settings and admin roles

Season: League seasons with defined periods and statuses

Team: Linked to a season, includes captain, players, and home venues

Player: Persistent across seasons, linked via TeamPlayer junction

TeamPlayer: Junction entity connecting players, teams, seasons, and roles

Venue: Match locations

Match: Scheduled events between teams, lineups, substitutes, status

Frame: Individual games within matches

Relationships

League → Season → Matches → Frames

Team → TeamPlayer → Player

Match → Lineups/Substitutions → Player

Database Initialization & Seeding

Realistic test data generation for leagues, teams, players, venues

Round-robin scheduling (single/double, even/odd teams, venue optimization)

Simulation of historical matches with random outcomes

Dynamic recalculation of standings and statistics

Tracking special achievements (8-ball breaks, run-outs)

Core Algorithms

Scheduling

Enhanced round-robin (circle method)

Handles byes, home/away balancing, and conflict resolution

Configurable match intervals and times

Statistics Calculation

Player: frames played/won, percentages, special achievements

Team: matches/frames played/won, league points, frame differentials

Automatic real-time recalculations upon results submission

Routing & Navigation

Public: /, /standings, /fixtures, /players

Auth: /login, /register, /forgot-password

Protected: Admin (/admin/*), Team Management

Role-based protected route wrapper (ProtectedRoute)

Authentication & Authorization

Firebase Auth (email/password)

Firestore roles: admin, captain, player, user

Context API for global auth state

Role-based UI and functionality

Secure route protection with loading states

Security

Firestore security rules (role-based)

Public: read-only

Admin: full access

Captain: limited update rights (matches/teams)

User: manage own profile

Project Structure (Updated)

src/
├── components/
│   ├── admin/
│   ├── common/
│   ├── layout/ (Navigation, Header, Footer)
│   └── team/
├── context/ (AuthContext.tsx)
├── firebase/
├── models/
├── pages/
│   ├── admin/ (Dashboard, Manage Players/Teams/Venues, Scheduling)
│   ├── auth/ (Login, Register, Forgot Password)
│   ├── public/ (Home, Player Stats, Standings)
│   └── team/ (Dashboard, Match Scorecard, Roster)
├── services/ (databaseService.ts)
├── utils/ (Scheduling logic)
├── App.tsx
└── main.tsx

Key Utility Functions (databaseService.ts)

CRUD operations for Leagues, Seasons, Teams, Players, Venues, Matches, Frames

Player-Team assignments via TeamPlayer

Retrieval functions optimized for performance (queries with filters)

Please use this information to quickly refresh context for future assistance.

